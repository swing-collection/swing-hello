{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"/]+|(?!\\b)(?=[A-Z][a-z])|\\.(?!\\d)|&[lg]t;","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Swing Hello","text":"<p>Swing Hello is a Django application that provides various views to demonstrate response handling, template rendering, JSON responses, form handling, and a simple API endpoint using Django Rest Framework. This package includes both function-based and class-based views.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Function-based view returning a plain text \"Hello!\" response.</li> <li>Class-based view returning a plain text \"Hello!\" response.</li> <li>Function-based view rendering a template with a context.</li> <li>Class-based view rendering a template with a context.</li> <li>Function-based view returning a JSON response.</li> <li>Class-based view returning a JSON response.</li> <li>Function-based view handling a form.</li> <li>Class-based view handling a form.</li> <li>Simple API endpoint using Django Rest Framework.</li> </ul>"},{"location":"#installation","title":"Installation","text":"<ol> <li>Ensure you have Django installed. If not, you can install it using pip:</li> </ol> <p><code>bash    pip install django</code></p> <ol> <li>Clone the repository or download the package and include it in your Django project.</li> </ol>"},{"location":"#setup","title":"Setup","text":"<ol> <li>Add <code>swing_hello</code> to your Django project's <code>INSTALLED_APPS</code> in <code>settings.py</code>:</li> </ol> <p><code>python    INSTALLED_APPS = [        ...        'swing_hello',    ]</code></p> <ol> <li>Include the <code>swing_hello</code> URLs in your project's <code>urls.py</code>:</li> </ol> <p>```python    from django.urls import path, include</p> <p>urlpatterns = [        ...        path('hello/', include('swing_hello.urls')),    ]    ```</p>"},{"location":"#usage","title":"Usage","text":""},{"location":"#function-based-views","title":"Function-Based Views","text":""},{"location":"#hello_response_view","title":"hello_response_view","text":"<p>A function-based view that returns a plain text \"Hello!\" response.</p>"},{"location":"#hello_template_view","title":"hello_template_view","text":"<p>A function-based view that renders a template with a context.</p>"},{"location":"#hello_json_view","title":"hello_json_view","text":"<p>A function-based view that returns a JSON response with a greeting message.</p>"},{"location":"#hello_form_view","title":"hello_form_view","text":"<p>A function-based view that displays a form and processes form submission.</p>"},{"location":"#class-based-views","title":"Class-Based Views","text":""},{"location":"#helloresponseview","title":"HelloResponseView","text":"<p>A class-based view that returns a plain text \"Hello!\" response.</p>"},{"location":"#hellotemplateview","title":"HelloTemplateView","text":"<p>A class-based view that renders a template with a context.</p>"},{"location":"#hellojsonview","title":"HelloJsonView","text":"<p>A class-based view that returns a JSON response with a greeting message.</p>"},{"location":"#helloformview","title":"HelloFormView","text":"<p>A class-based view that displays a form and processes form submission.</p>"},{"location":"#helloapiview","title":"HelloApiView","text":"<p>A simple API view using Django Rest Framework that returns a JSON response with a greeting message.</p>"},{"location":"#url-patterns","title":"URL Patterns","text":"<p>The package provides the following URL patterns:</p> <ul> <li><code>/hello/</code> - Renders the template with context using <code>HelloTemplateView</code>.</li> <li><code>/hello/response</code> - Returns a plain text \"Hello!\" response using <code>HelloResponseView</code>.</li> <li><code>/hello/template</code> - Renders the template with context using <code>HelloTemplateView</code>.</li> <li><code>/hello/json</code> - Returns a JSON response using <code>HelloJsonView</code>.</li> <li><code>/hello/json_func</code> - Returns a JSON response using <code>hello_json_view</code>.</li> <li><code>/hello/form</code> - Displays a form and processes form submission using <code>HelloFormView</code>.</li> <li><code>/hello/form_func</code> - Displays a form and processes form submission using <code>hello_form_view</code>.</li> <li><code>/hello/api</code> - A simple API endpoint returning a JSON response using <code>HelloApiView</code>.</li> </ul>"},{"location":"#example-templates","title":"Example Templates","text":"<p>hello.html</p> <pre><code>&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;{{ title }}&lt;/title&gt;\n    &lt;style&gt;\n        body {\n            font-family: Arial, sans-serif;\n            line-height: 1.6;\n            margin: 0;\n            padding: 0;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            height: 100vh;\n            background-color: #f4f4f4;\n        }\n        .container {\n            background: #fff;\n            padding: 20px;\n            border-radius: 8px;\n            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n            text-align: center;\n        }\n        h1 {\n            margin-bottom: 20px;\n            color: #333;\n        }\n        p {\n            color: #666;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=\"container\"&gt;\n        &lt;h1&gt;{{ title }}&lt;/h1&gt;\n        &lt;p&gt;{{ content }}&lt;/p&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>hello_form.html</p> <pre><code>&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Hello Form&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Hello Form&lt;/h1&gt;\n    &lt;form method=\"post\"&gt;\n        {% csrf_token %}\n        {{ form.as_p }}\n        &lt;button type=\"submit\"&gt;Submit&lt;/button&gt;\n    &lt;/form&gt;\n    {% if message %}\n        &lt;p&gt;{{ message }}&lt;/p&gt;\n    {% endif %}\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"#testing","title":"Testing","text":"<p>Run the tests using pytest to verify the functionality of the Swing Hello views.</p> <p>test_views.py</p> <pre><code>import pytest\nfrom django.test import RequestFactory, HttpRequest\nfrom django.http import HttpResponse, JsonResponse\nfrom rest_framework.test import APIRequestFactory\nfrom swing_hello.views import (\n    hello_response_view,\n    HelloResponseView,\n    hello_template_view,\n    HelloTemplateView,\n)\nfrom swing_hello.views.view_hello_json import hello_json_view, HelloJsonView\nfrom swing_hello.views.view_hello_form import hello_form_view, HelloFormView\nfrom swing_hello.views.view_hello_api import HelloApiView\n\n@pytest.mark.django_db\nclass TestHelloResponseView:\n    def setup_method(self) -&gt; None:\n        self.factory: RequestFactory = RequestFactory()\n\n    def test_hello_response_view(self) -&gt; None:\n        request: HttpRequest = self.factory.get('/hello/response')\n        response: HttpResponse = hello_response_view(request)\n        assert response.status_code == 200\n        assert response.content.decode() == \"Hello!\"\n\n    def test_HelloResponseView(self) -&gt; None:\n        request: HttpRequest = self.factory.get('/hello/response')\n        response: HttpResponse = HelloResponseView.as_view()(request)\n        assert response.status_code == 200\n        assert response.content.decode() == \"Hello!\"\n\n@pytest.mark.django_db\nclass TestHelloTemplateView:\n    def setup_method(self) -&gt; None:\n        self.factory: RequestFactory = RequestFactory()\n\n    def test_hello_template_view(self) -&gt; None:\n        request: HttpRequest = self.factory.get('/hello/template')\n        response: HttpResponse = hello_template_view(request)\n        assert response.status_code == 200\n        assert \"Hello!\" in response.content.decode()\n        assert \"Lorem ipsum dolor sit amet\" in response.content.decode()\n\n    def test_HelloTemplateView(self) -&gt; None:\n        request: HttpRequest = self.factory.get('/hello/template')\n        response: HttpResponse = HelloTemplateView.as_view()(request)\n        assert response.status_code == 200\n        assert \"Hello!\" in response.content.decode()\n        assert \"Lorem ipsum dolor sit amet\" in response.content.decode()\n\n@pytest.mark.django_db\nclass TestHelloJsonView:\n    def setup_method(self) -&gt; None:\n        self.factory: RequestFactory = RequestFactory()\n\n    def test_hello_json_view(self) -&gt; None:\n        request: HttpRequest = self.factory.get('/hello/json_func')\n        response: JsonResponse = hello_json_view(request)\n        assert response.status_code == 200\n        assert response.json() == {\"message\": \"Hello, World!\"}\n\n    def test_HelloJsonView(self) -&gt; None:\n        request: HttpRequest = self.factory.get('/hello/json')\n        response: JsonResponse = HelloJsonView.as_view()(request)\n        assert response.status_code == 200\n        assert response.json() == {\"message\": \"Hello, World!\"}\n\n@pytest.mark.django_db\nclass TestHelloFormView:\n    def setup_method(self) -&gt; None:\n        self.factory: RequestFactory = RequestFactory()\n\n    def test_hello_form_view_get(self) -&gt; None:\n        request: HttpRequest = self.factory.get('/hello/form_func')\n        response: HttpResponse = hello_form_view(request)\n        assert response.status_code == 200\n        assert \"form\" in response.content.decode()\n\n    def test_hello_form_view_post(self) -&gt; None:\n        request: HttpRequest = self.factory.post('/hello/form_func', {'name': 'Alice'})\n        response: HttpResponse = hello_form_view(request)\n        assert response.status_code == 200\n        assert \"Hello, Alice!\" in response.content.decode()\n\n    def test_HelloFormView_get(self) -&gt; None:\n        request: HttpRequest = self.factory.get('/hello/form')\n        response: HttpResponse = HelloFormView.as_view()(request)\n        assert response.status_code == 200\n        assert \"form\" in response.content.decode()\n\n    def test_HelloFormView_post(self) -&gt; None:\n        request: HttpRequest = self.factory.post('/hello/form', {'name': 'Alice'})\n        response: HttpResponse = HelloFormView.as_view()(request)\n        assert response.status_code == 200\n        assert \"Hello, Alice!\" in response.content.decode()\n\n@pytest.mark.django_db\nclass TestHelloApiView:\n    def setup_method(self) -&gt; None:\n        self.factory: APIRequestFactory = APIRequestFactory()\n\n    def test_HelloApiView(self) -&gt; None:\n        request = self.factory.get('/hello/api')\n        response = HelloApiView.as_view()(request)\n        assert response.status_code == 200\n        assert response.data == {\"message\": \"Hello, World!\"}\n</code></pre>"},{"location":"#contributing","title":"Contributing","text":"<p>Contributions are welcome! Please fork the repository and submit a pull request with your changes.</p> <p>License</p> <p>This project is licensed under the MIT License. See the LICENSE file for more details.</p> <p>Contact</p> <p>Swing Hello is developed by Scape Agency. For any inquiries or support, please contact us at [info@scapeagency.com]. This documentation covers the new views, their purposes, and how to use them within the <code>Swing Hello</code> Django application. Feel free to further customize it to fit the specific details and requirements of your project.</p>"},{"location":"quick_start/","title":"Quick Start","text":""},{"location":"quick_start/#installation","title":"Installation","text":""}]}